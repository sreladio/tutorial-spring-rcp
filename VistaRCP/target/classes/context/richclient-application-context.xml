<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation=
  	"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd" >
    
  <!--
    The application context is used to configure components and services within
    the platform.  The platform utilizes a number of services at runtime, and
    these must be configured here.  The two key beans for this are the serviceLocator
    and applicationServices.  Many of the services have reasonable default
    implementations, meaning that you probably won't need to define them here
    unless you have specific needs not addressed in the default implementation.

    Beyond the services, you will define the various components that make up
    your application, like the application descriptor, views, lifecycle advisor,
    validation rules, etc.

    This may look a little daunting at first, but hang in there.  The good news
    is that you don't have to change many of the bean configurations provided
    here when you are setting up your application.

    Typically, you would change the following:

    1. The startingPageId on the lifecycleAdvisor.
    2. The eventExceptionHandler on the lifecycleAdvisor (or remove it if you
    don't want to use it).
    3. Specify the location of your resource bundle in the messageSource.
    4. Specify the mapping properties files for images in imageResourcesFactory.
    5. Specify your rulesSource class, if you're using one.
    6. Configure your view beans.
  -->

  <!--
    Bean: application
    Usage: Platform required
    Description: This defines the singleton application instance to be used.
    Note that, currently, this object is not pluggable.  You must use the
    class specified below and configure it as needed.
    
    Es el bean principal que define la aplicación real. Tiene que llamarse 
    forzosamente 'application' porque es lo que espera el lanzador  de 
    aplicaciones.
    
    Tiene dos constructores, uno con dos argumentos y otro que sólo recive un
    'ApplicationLifecycleAdvisor'.
  -->
    <bean name="application" class="org.springframework.richclient.application.Application">
        <constructor-arg index="0" ref="applicationDescriptor" />
        <constructor-arg index="1" ref="applicationLifecycleAdvisor" />
    </bean>
    

  <!--
  	Bean que mediante AOP será invocado en diferentes etapas del ciclo de vida
  	de la aplicación, commonStartup, onClose, ...
  	
  	Entre otras cosas, especifica cual es la vista por defecto de la aplicación.
  	Esa vista la recibe en el parámetro 'startingPageId' que será una referencia 
  	a un bean que represente a una vista.
  -->
    <bean name="applicationLifecycleAdvisor" class="com.eladio.aop.ApplicationLifecycleAdvisor">
    	<property name="startingPageId">
    		<value>startingAppView</value>
    	</property>
    </bean>
    

<!-- ********************************** BEANS DE VISTAS ********************************** -->   


  <!--    
  	Bean que da de alta a la vista que se va a mostrar cuando se arranque la aplicación.
  	Implementa la clase 'DefaultViewDescriptor' y se le pasa como parámetro 'viewClass'
  	la clase que implementa la vista.
  -->
    <bean name="startingAppView" class="org.springframework.richclient.application.support.DefaultViewDescriptor">
    	<property name="viewClass">
    		<value>com.eladio.vistas.StartingAppView</value>
    	</property>
    </bean>
    

<!-- ********************************** BEANS DE SOPORTE ********************************* -->  


  <!--
    Bean: serviceLocator
    Usage: Platform required
    Description: This defines the singleton application service locator instance.
    This is a trivial singleton object providing access to the configured
    services, as specified on the applicationServices property.
    
    Es el responsable de localizar los servícios de aplicación que realmente 
    implementan la lógica de negocio.
  -->
    <bean id="serviceLocator" class="org.springframework.richclient.application.ApplicationServicesLocator">
        <property name="applicationServices" ref="applicationServices" />
    </bean>


  <!--
    Bean: applicationServices
    Usage: Platform required (unless you set this up programmatically)
    Description: This configures the application services available to the platform.
    There are specific setter methods for all the standard services, see the
    javadoc on the DefaultApplicationServices class for more details.
    NOTE: The use of bean ids (idref) is preferred over using direct bean
    references to avoid startup problems with circular references.
    
    Implementa algunos servícios por defecto que son necesarios en las aplicaciones
    SRCP, como por ejemplo, la carga de recursos de imágenes.
  -->
    <bean id="applicationServices"
    class="org.springframework.richclient.application.support.DefaultApplicationServices">
        <property name="imageSourceId">
            <idref bean="imageSource" />
        </property>
        <property name="formComponentInterceptorFactoryId">
            <idref bean="formComponentInterceptorFactory" />
        </property>
        <property name="applicationObjectConfigurerId">
            <idref bean="applicationObjectConfigurer" />
        </property>
    </bean>
    
    
  <!--
    Bean: imageSource
    Usage: platform required
    Description: This specifies the component that is responsible for providing
    images to the platform.  It makes use of a resource factory that converts
    the image keys to resource locations.  The DefaultImageSource also provides
    a "broken image" image for any requested image that can't be found or fails
    to load.
  -->
    <bean id="imageSource" class="org.springframework.richclient.image.DefaultImageSource">
        <constructor-arg index="0" ref="imageResourcesFactory" />
        <property name="brokenImageIndicator" value="/org/springframework/richclient/images/alert/error_obj.gif" />
    </bean>
    
    
  <!--
    Bean: imageResourcesFactory
    Usage: platform required (if you are using the DefaultImageSource, see below)
    Description: This specifies the component that is responsible for providing
    image resources locations.  This factory uses the specified properties
    files to map image resource keys to image locations.
  -->
    <bean id="imageResourcesFactory" class="org.springframework.context.support.ResourceMapFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:org/springframework/richclient/image/images.properties</value>
                <value>classpath:images/images.properties</value>
            </list>
        </property>
    </bean>
    
    
  <!--
    Bean: formComponentInterceptorFactory
    Usage: platform optional
    Description: This specifies the list of interceptors to attach to controls
    constructed by the platform.  This allows for a declarative model for
    specifying "additional" functionality to be added to various components.
    The configuration below adds interceptors to overlay validation error
    images and background color changes, provide popup menus in text fields,
    and autocompletion (as you type) for comboboxes.
  -->
    <bean id="formComponentInterceptorFactory"
    class="org.springframework.richclient.form.builder.support.ChainedInterceptorFactory">
        <property name="interceptorFactories">
            <list>
                <bean class="org.springframework.richclient.form.builder.support.ColorValidationInterceptorFactory">
                    <property name="errorColor" value="255,245,245" />
                </bean>
                <bean class="org.springframework.richclient.form.builder.support.OverlayValidationInterceptorFactory" />
                <bean class="org.springframework.richclient.text.TextComponentPopupInterceptorFactory" />
                <bean class="org.springframework.richclient.list.ComboBoxAutoCompletionInterceptorFactory" />
            </list>
        </property>
    </bean>
    
    
  <!--
    Bean: applicationObjectConfigurer
    Usage: platform required (because it is a bean post processor)
    Description: This defines the object responsible for configuring other objects
    constructed via the platform.  This is a critical part of the I18N support.
  -->
    <bean id="applicationObjectConfigurer" depends-on="serviceLocator"
    class="org.springframework.richclient.application.config.DefaultApplicationObjectConfigurer">
    </bean>
    
    
  <!--
    Bean: applicationDescriptor
    Usage: platform required
    Description: This defines the Application metadata to be used by the
    Application.  Note the reference to this bean in the constructor
    args in the application bean.
  -->
    <bean id="applicationDescriptor"
    class="org.springframework.richclient.application.support.DefaultApplicationDescriptor">
        <property name="version" value="0.1" />
        <property name="buildId" value="20080616" />
    </bean>
    
</beans>